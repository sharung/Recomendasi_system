# -*- coding: utf-8 -*-
"""book_rekomendation_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DQUxXDSE94DXNHAieXZMYpTNnz9kDvaM

# Read Data
"""

! pip install -q kaggle
! mkdir ~/.kaggle

# Menyalin berkas kaggle.json pada direktori aktif saat ini ke folder .kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d ruchi798/bookcrossing-dataset

# Mengekstrak berkas zip ke direktori aktif saat ini
!unzip /content/bookcrossing-dataset.zip

import numpy as np
import pandas as pd
import seaborn as sns
from scipy.sparse import csr_matrix
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.neighbors import NearestNeighbors

"""# Data Understanding"""

path = "/content/Book reviews/Book reviews/"
df_user = pd.read_csv(path+'BX-Users.csv', sep=";", error_bad_lines=False,encoding='latin-1')

df_books = pd.read_csv(path+'BX_Books.csv', sep=";", error_bad_lines=False,encoding='latin-1')

df_rating = pd.read_csv(path+'BX-Book-Ratings.csv', sep=";", error_bad_lines=False,encoding='latin-1')

"""# Exploratory Data Analysis (EDA)"""

df_user.info()

df_books.info()

df_rating.info()

df_books = df_books.drop(['Year-Of-Publication', 'Image-URL-S', 'Image-URL-M', 'Image-URL-L'], axis=1)
rating_book = df_books.merge(df_rating, on='ISBN')
rating_book.head()

"""|index| ISBN      |	Book-Title              |	Book-Author|	Publisher       |	User-ID|	Book-Rating|	Number of Book-Rating_x|	Number of Book-Rating_y|
|-----|-----------|-------------------------|------------|-----------       |--------|-------------|-------------------------|-------------------------|
|0    |	0399135782|	The Kitchen God's Wife	|Amy Tan     |	Putnam Pub Group|	8      |	0          |	33                     |	33                     |
|1    |	0399135782|	The Kitchen God's Wife	|Amy Tan     |	Putnam Pub Group|	11676  |	9          |	33                     |	33                     |
|2    |	0399135782|	The Kitchen God's Wife	|Amy Tan     |	Putnam Pub Group|	29526  |	9          |	33                     |	33                     |
|3    |	0399135782|	The Kitchen God's Wife	|Amy Tan     |	Putnam Pub Group|	36836  |	0          |	33                     |	33                     |
|4    |	0399135782|	The Kitchen God's Wife	|Amy Tan     |	Putnam Pub Group|	46398  |	9          |	33                     |	33                     |

### Tambahkan jumlah peringkat yang ditetapkan. Hapus dari pengguna yang memberi peringkat beberapa kali
"""

number_rating = rating_book.groupby('ISBN')['Book-Rating'].count().reset_index()
number_rating.rename(columns={'Book-Rating': 'Number of Book-Rating'}, inplace=True)
rating_book = rating_book.merge(number_rating, on='ISBN')
rating_book

"""###  memfilter rating_book diatas 30"""

rating_book = rating_book[rating_book['Number of Book-Rating'] >= 30]
rating_book.shape

"""### menghapus duplikat data

"""

rating_book.drop_duplicates(['User-ID', 'Book-Title'], inplace=True)
rating_book.shape

"""### membuat table pivot"""

rating_book_pivot = rating_book.pivot_table(columns='User-ID', index='Book-Title', values='Book-Rating')
rating_book_pivot.fillna(0, inplace=True)
rating_book_pivot

"""# Modeling"""

book_matrix = csr_matrix(rating_book_pivot)
model = NearestNeighbors(algorithm='brute')
model.fit(book_matrix)

rating_book_pivot.iloc[60, :].values.reshape(1,-1)

_, recommendations = model.kneighbors(rating_book_pivot.iloc[60, :].values.reshape(1,-1))
recommendations

for i in range(len(recommendations)):
    print(recommendations[i])
    print(rating_book_pivot.index[recommendations[i]])

def recomend_book(book_name):
    book_id = np.where(rating_book_pivot.index == book_name)[0][0]
    _, recommendations = model.kneighbors(rating_book_pivot.iloc[book_id,:].values.reshape(1,-1))
    for i in range(len(recommendations)):
        if i == 0:
            print(f"For book \"{book_name}\" is recommended")
        if not i:
            print(rating_book_pivot.index[recommendations[i]])

recomend_book('Fatal Terrain')

"""# Evaluation

"""

! pip install surprise
from surprise import Dataset, Reader
from surprise.model_selection import cross_validate
from surprise import SVD

rating_book.info()

reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df (rating_book[['User-ID','Number of Book-Rating', 'Book-Rating']],reader)
model = SVD()
results = cross_validate(model, data, measures=['RMSE', 'MAE'], cv=5)

print("Mean RMSE:", results['test_rmse'].mean())
print("Mean MAE:", results['test_mae'].mean())

